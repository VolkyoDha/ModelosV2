<style>
  .subject-chips {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    margin-top: 8px;
  }
  
  .subject-chip {
    position: relative;
  }
  
  .subject-checkbox {
    position: absolute;
    opacity: 0;
  }
  
  .chip-label {
    display: inline-block;
    padding: 3px 8px;
    background-color: #e9ecef;
    border-radius: 12px;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .subject-checkbox:checked + .chip-label {
    background-color: #007bff;
    color: white;
  }
  
  .professor-subjects {
    margin-top: 10px;
    border-top: 1px solid #eee;
    padding-top: 8px;
  }
  
  .subject-selection strong {
    font-size: 0.85rem;
    color: #555;
  }
</style>

<div class="calculate-schedules">
  <div class="detail-header">
    <h2>Calcular Horarios Automáticamente</h2>
    <div class="header-actions">
      <a href="/horarios" class="btn btn-secondary">
        <i class="fas fa-arrow-left"></i> Volver
      </a>
    </div>
  </div>

  <div class="detail-content">
    <form action="/horarios/calcular" method="POST" id="calculateForm">
      <div class="info-grid">
        <div class="info-card">
          <h3>Instrucciones</h3>
          <div class="alert alert-info" style="margin-bottom: 20px;">
            <i class="fas fa-info-circle"></i> Para calcular horarios:
            <ol>
              <li>Seleccione los profesores disponibles</li>
              <li>Para cada profesor, asigne las materias que puede impartir</li>
              <li>Configure las restricciones de horario</li>
              <li>Haga clic en "Calcular Horarios"</li>
            </ol>
          </div>
          <div class="alert alert-warning">
            <i class="fas fa-clock"></i> <strong>Nota:</strong> El cálculo puede tardar varios minutos dependiendo de la cantidad de profesores y materias seleccionadas.
          </div>
        </div>
        <div class="info-card">
          <h3>Profesores Disponibles <span class="badge badge-danger">Seleccione al menos uno</span></h3>
          <div class="professors-grid">
            <% profesores.forEach(profesor => { %>
              <div class="professor-checkbox" style="border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; border-radius: 5px;">
                <input type="checkbox" id="profesor_<%= profesor.id %>" name="profesores[]" value="<%= profesor.id %>" style="transform: scale(1.5); margin-right: 10px;">
                <label for="profesor_<%= profesor.id %>" style="display: inline-block; width: calc(100% - 30px); cursor: pointer;">
                  <div class="professor-info">
                    <strong class="professor-name"><%= profesor.nombre %> <%= profesor.apellido %></strong>
                    <span class="badge badge-secondary"><%= profesor.especialidad %></span>
                  </div>
                  <div class="professor-availability">
                    <span class="current-hours"><%= profesor.horasAsignadas || 0 %>h asignadas</span>
                    <span class="max-hours">Máx: <%= profesor.maxHorasClase || profesor.maxHorasSemana || 20 %>h clase</span>
                  </div>
                  <div class="professor-subjects">
                    <div class="subject-selection">
                      <strong>Materias que puede impartir: <span class="badge badge-warning">Asigne al menos una</span></strong>
                      <div class="subject-chips">
                        <% materias.forEach(materia => { %>
                          <div class="subject-chip">
                            <input type="checkbox" id="prof_<%= profesor.id %>_mat_<%= materia.id %>" 
                                  name="profesor_materias[<%= profesor.id %>][]" 
                                  value="<%= materia.id %>" 
                                  class="subject-checkbox">
                            <label for="prof_<%= profesor.id %>_mat_<%= materia.id %>" class="chip-label">
                              <%= materia.nombre %>
                            </label>
                          </div>
                        <% }) %>
                      </div>
                    </div>
                  </div>
                </label>
              </div>
            <% }) %>
          </div>
        </div>
        <div class="info-card">
          <h3>Restricciones y Configuración</h3>
          <div class="restrictions-grid">
            <div class="restriction-item">
              <label for="maxHoursPerDay">Máximo de horas por día:</label>
              <input type="number" id="maxHoursPerDay" name="maxHoursPerDay" value="8" min="1" max="12">
            </div>
            <div class="restriction-item">
              <label for="preferredStartTime">Hora de inicio preferida:</label>
              <select id="preferredStartTime" name="preferredStartTime">
                <option value="7">07:00</option>
                <option value="8" selected>08:00</option>
                <option value="9">09:00</option>
                <option value="10">10:00</option>
              </select>
            </div>
            <div class="restriction-item">
              <label for="preferredEndTime">Hora de fin preferida:</label>
              <select id="preferredEndTime" name="preferredEndTime">
                <option value="16">16:00</option>
                <option value="17">17:00</option>
                <option value="18" selected>18:00</option>
                <option value="19">19:00</option>
                <option value="20">20:00</option>
              </select>
            </div>
            <div class="restriction-item">
              <label for="avoidWeekends">Evitar fines de semana:</label>
              <input type="checkbox" id="avoidWeekends" name="avoidWeekends" checked>
            </div>
          </div>
        </div>
      </div>
      <div class="form-actions mt-4">
        <button type="submit" class="btn btn-primary btn-lg">
          <i class="fas fa-calculator"></i> Calcular Horarios
        </button>
        <button type="button" class="btn btn-secondary" onclick="resetForm()">
          <i class="fas fa-undo"></i> Reiniciar
        </button>
      </div>
    </form>

    <!-- Script para validar selecciones de profesores y materias -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Obtener todos los checkboxes de profesores
        const profesorCheckboxes = document.querySelectorAll('input[name="profesores[]"]');
        
        // Función para actualizar el estado de las materias según la selección de profesores
        function updateMateriaCheckboxes() {
          profesorCheckboxes.forEach(profesorCheckbox => {
            const profesorId = profesorCheckbox.value;
            const materiaCheckboxes = document.querySelectorAll(`input[name="profesor_materias[${profesorId}][]"]`);
            
            materiaCheckboxes.forEach(materiaCheckbox => {
              // Si el profesor no está seleccionado, deshabilitar y desmarcar sus materias
              if (!profesorCheckbox.checked) {
                materiaCheckbox.disabled = true;
                materiaCheckbox.checked = false;
                materiaCheckbox.parentElement.classList.add('disabled');
              } else {
                materiaCheckbox.disabled = false;
                materiaCheckbox.parentElement.classList.remove('disabled');
              }
            });
          });
        }
        
        // Agregar evento change a los checkboxes de profesores
        profesorCheckboxes.forEach(checkbox => {
          checkbox.addEventListener('change', updateMateriaCheckboxes);
        });
        
        // Ejecutar la validación inicial
        updateMateriaCheckboxes();
        
        // Validar el formulario antes de enviar
        document.getElementById('calculateForm').addEventListener('submit', function(e) {
          // Ocultar cualquier mensaje de error previo
          const toastContainer = document.getElementById('toast-container');
          if (toastContainer) {
            toastContainer.innerHTML = '';
          }
          
          // Verificar que al menos un profesor esté seleccionado
          const profesoresSeleccionados = document.querySelectorAll('input[name="profesores[]"]:checked');
          if (profesoresSeleccionados.length === 0) {
            e.preventDefault();
            showErrorMessage('Debe seleccionar al menos un profesor.');
            return false;
          }
          
          // Ya no necesitamos verificar materias generales, solo las asignadas a profesores
          
          // Verificar que cada profesor seleccionado tenga al menos una materia asignada
          let profesoresSinMaterias = [];
          profesoresSeleccionados.forEach(profesor => {
            const profesorId = profesor.value;
            const profesorNombre = profesor.parentElement.querySelector('.professor-name').textContent.trim();
            const materiasProfSeleccionadas = document.querySelectorAll(`input[name="profesor_materias[${profesorId}][]"]:checked`);
            if (materiasProfSeleccionadas.length === 0) {
              profesoresSinMaterias.push(profesorNombre);
            }
          });
          
          if (profesoresSinMaterias.length > 0) {
            e.preventDefault();
            showErrorMessage(`Los siguientes profesores no tienen materias asignadas: ${profesoresSinMaterias.join(', ')}. Cada profesor debe tener al menos una materia.`);
            return false;
          }
          
          // Mostrar overlay de carga
          document.querySelector('.loading-overlay').style.display = 'flex';
          showInfoMessage('Calculando horario, por favor espere...');
          localStorage.setItem('calculationInProgress', 'true');
          
          return true;
        });
        
        // Funciones para mostrar mensajes de error y notificaciones
        function showErrorMessage(message) {
          const container = document.createElement('div');
          container.className = 'alert alert-danger';
          container.style.position = 'fixed';
          container.style.top = '20px';
          container.style.left = '50%';
          container.style.transform = 'translateX(-50%)';
          container.style.zIndex = '9999';
          container.style.minWidth = '300px';
          container.style.maxWidth = '80%';
          container.style.padding = '15px';
          container.style.borderLeft = '5px solid #721c24';
          container.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)';
          
          const icon = document.createElement('i');
          icon.className = 'fas fa-exclamation-triangle';
          icon.style.marginRight = '10px';
          
          container.innerHTML = `<strong>Error:</strong> ${message}`;
          container.prepend(icon);
          
          document.body.appendChild(container);
          
          // Ocultar el overlay de carga si está visible
          const loadingOverlay = document.querySelector('.loading-overlay');
          if (loadingOverlay) {
            loadingOverlay.style.display = 'none';
          }
          
          // Auto-eliminar después de 5 segundos
          setTimeout(() => {
            if (container && container.parentNode) {
              container.parentNode.removeChild(container);
            }
          }, 5000);
        }
        
        function showInfoMessage(message) {
          const container = document.createElement('div');
          container.className = 'alert alert-info';
          container.style.position = 'fixed';
          container.style.top = '20px';
          container.style.left = '50%';
          container.style.transform = 'translateX(-50%)';
          container.style.zIndex = '9999';
          container.style.minWidth = '300px';
          container.style.maxWidth = '80%';
          container.style.padding = '15px';
          container.style.borderLeft = '5px solid #0c5460';
          container.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)';
          
          const icon = document.createElement('i');
          icon.className = 'fas fa-info-circle';
          icon.style.marginRight = '10px';
          
          container.innerHTML = `<strong>Info:</strong> ${message}`;
          container.prepend(icon);
          
          document.body.appendChild(container);
          
          // Auto-eliminar después de 5 segundos
          setTimeout(() => {
            if (container && container.parentNode) {
              container.parentNode.removeChild(container);
            }
          }, 5000);
        }
      });
    </script>
    
    <!-- Agregar estilos para materias deshabilitadas -->
    <style>
      .subject-chip.disabled .chip-label {
        opacity: 0.5;
        cursor: not-allowed;
        background-color: #f0f0f0;
        color: #999;
      }
      
      .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
      }
      
      .loading-content {
        background-color: white;
        padding: 30px;
        border-radius: 8px;
        text-align: center;
        max-width: 400px;
      }
      
      .spinner {
        border: 6px solid #f3f3f3;
        border-top: 6px solid #3498db;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
      }
      
      .progress-container {
        width: 100%;
        background-color: #f1f1f1;
        border-radius: 4px;
        margin: 20px 0;
      }
      
      .progress-bar {
        width: 0%;
        height: 10px;
        background-color: #4CAF50;
        border-radius: 4px;
        transition: width 0.3s;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    </style>

    <% if (typeof error !== 'undefined' && error) { %>
      <div class="alert alert-danger" style="font-size: 1.1rem; padding: 15px; margin-bottom: 20px; border-left: 5px solid #721c24;">
        <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
        <strong>Error:</strong> <%- error %>
      </div>
    <% } %>

    <% if (typeof resultado !== 'undefined' && resultado) { %>
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Resultados del Cálculo</h5>
        </div>
        <div class="card-body">
            <% if (typeof mensajeResultado !== 'undefined' && mensajeResultado) { %>
                <div class="alert <%= resultado.exito ? 'alert-success' : (resultado.asignaciones && Object.keys(resultado.asignaciones).length > 0 ? 'alert-warning' : 'alert-danger') %>">
                    <i class="fas <%= resultado.exito ? 'fa-check-circle' : (resultado.asignaciones && Object.keys(resultado.asignaciones).length > 0 ? 'fa-exclamation-triangle' : 'fa-times-circle') %>"></i> 
                    <%= mensajeResultado %>
                </div>
            <% } else { %>
                <% if (resultado.exito) { %>
                    <div class="alert alert-success">
                        <i class="fas fa-check-circle"></i> Se ha generado un horario completo satisfaciendo todas las restricciones.
                    </div>
                <% } else if (resultado.asignaciones && Object.keys(resultado.asignaciones).length > 0) { %>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i> Se ha generado un horario parcial. No fue posible asignar todas las materias respetando las restricciones.
                    </div>
                <% } else { %>
                    <div class="alert alert-danger">
                        <i class="fas fa-times-circle"></i> No fue posible generar un horario. Intente reducir las restricciones o aumentar el número de profesores disponibles.
                    </div>
                <% } %>
            <% } %>
          <div class="summary-icon">
            <i class="fas fa-clock"></i>
          </div>
          <div class="summary-content">
            <h4><%= Math.round(resultado.estadisticas.tiempoMs / 1000) %>s</h4>
            <p>Tiempo de cálculo</p>
          </div>
        </div>
        <div class="summary-card warning">
          <div class="summary-icon">
            <i class="fas fa-chart-line"></i>
          </div>
          <div class="summary-content">
            <h4><%= resultado.resumen.totalHoras %></h4>
            <p>Total de Horas</p>
          </div>
        </div>
      </div>
      
      <!-- Bibliotecas de FullCalendar -->
      <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css" rel="stylesheet">
      <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/locales/es.js"></script>
      
      <!-- Vista de Calendario -->
      <div id="calendar-container" class="calendar-container mt-4" style="display: block !important; visibility: visible !important; opacity: 1 !important; min-height: 650px;">
        <h4>Vista de Horario Semanal</h4>
        
        <!-- Contenedor del calendario con estilos inline para garantizar visibilidad -->
        <div id="calendar" style="display: block !important; visibility: visible !important; opacity: 1 !important; height: 600px !important; min-height: 600px !important;"></div>
        
        <!-- Mostrar estadísticas de eventos generados -->
        <div class="alert alert-info mt-3 mb-3">
          <i class="fas fa-info-circle"></i> 
          <strong>Eventos generados:</strong> <%= typeof horarioEvents !== 'undefined' ? horarioEvents.length : 0 %> asignaciones
          <% if (typeof horarioEvents !== 'undefined' && horarioEvents.length > 0) { %>
            <button class="btn btn-sm btn-outline-primary ml-3" onclick="toggleEventsList()">Ver detalles</button>
          <% } %>
        </div>
        
        <!-- Lista de eventos (oculta por defecto) -->
        <div id="events-list" style="display: none;" class="mb-3">
          <div class="card">
            <div class="card-header bg-light">
              <h6 class="mb-0">Detalle de asignaciones</h6>
            </div>
            <div class="card-body p-0">
              <div class="table-responsive">
                <table class="table table-sm table-hover">
                  <thead>
                    <tr>
                      <th>Profesor</th>
                      <th>Materia</th>
                      <th>Día</th>
                      <th>Horario</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% if (typeof horarioEvents !== 'undefined') { %>
                      <% horarioEvents.forEach(function(evento) { %>
                        <tr>
                          <td><%= evento.profesorNombre %></td>
                          <td><%= evento.materiaNombre %></td>
                          <td>
                            <% const dias = ['', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo']; %>
                            <%= dias[evento.dia] %>
                          </td>
                          <td><%= evento.horaInicio %> - <%= evento.horaFin %></td>
                        </tr>
                      <% }); %>
                    <% } %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Script para interactuar con la lista de eventos -->
        <script>
          // Función para mostrar/ocultar la lista de eventos
          function toggleEventsList() {
            const eventsList = document.getElementById('events-list');
            if (eventsList) {
              eventsList.style.display = eventsList.style.display === 'none' ? 'block' : 'none';
            }
          }
          
          // Los datos del calendario se cargarán mediante AJAX en horarios_fixed.js
          console.log('La página de cálculo está lista');
        </script>
        <script src="/js/horarios_fixed.js?v=<%= Date.now() %>" onerror="console.error('Error al cargar horarios_fixed.js');"></script>
        <script>
          // Imprimir en la consola para depuración
          console.log('Eventos de horario cargados:', window.horarioEvents || []);
          
          // Función para forzar la visibilidad del calendario
          function forceCalendarVisibility() {
            const calendarContainer = document.querySelector('.calendar-container');
            const calendarEl = document.getElementById('calendar');
            
            if (calendarContainer) {
              calendarContainer.style.display = 'block';
              calendarContainer.style.visibility = 'visible';
              calendarContainer.style.opacity = '1';
              calendarContainer.style.zIndex = '1000';
            }
            
            if (calendarEl) {
              calendarEl.style.display = 'block';
              calendarEl.style.visibility = 'visible';
              calendarEl.style.opacity = '1';
              calendarEl.style.height = '600px';
              calendarEl.style.minHeight = '600px';
            }
            
            // También hacer visibles los elementos de FullCalendar
            document.querySelectorAll('.fc, .fc-view-harness, .fc-view').forEach(el => {
              if (el) {
                el.style.display = 'block';
                el.style.visibility = 'visible';
                el.style.opacity = '1';
              }
            });
          }
          
          // Asegurarse de que el calendario se inicialice correctamente
          document.addEventListener('DOMContentLoaded', function() {
            // Inicializar el calendario cuando el DOM esté listo
            setTimeout(function() {
              if (typeof initCalendar === 'function') {
                console.log('Inicializando calendario desde el evento DOMContentLoaded');
                initCalendar();
                forceCalendarVisibility();
              }
            }, 500);
          });
          
          // Inicializar también cuando la ventana esté completamente cargada
          window.addEventListener('load', function() {
            // Inicializar el calendario cuando la ventana esté completamente cargada
            setTimeout(function() {
              if (typeof initCalendar === 'function') {
                console.log('Inicializando calendario desde el evento load');
                initCalendar();
                forceCalendarVisibility();
              }
            }, 500);
            
            // Programar múltiples intentos de forzar visibilidad
            [1000, 2000, 3000, 5000].forEach(delay => {
              setTimeout(forceCalendarVisibility, delay);
            });
          });
        </script>
      </div>
      
      <% if (resultado.materias && resultado.materias.length > 0) { %>
      <div class="assigned-subjects">
        <h4>Materias Asignadas Exitosamente</h4>
        <div class="subjects-list">
          <% resultado.materias.forEach(materia => { %>
            <div class="subject-result success">
              <div class="subject-header">
                <h5><%= materia.materia.nombre %></h5>
                <span class="completion-badge">Completado</span>
              </div>
              <div class="subject-details">
                <p><strong>Profesor:</strong> <%= materia.asignaciones[0]?.profesorNombre || 'No asignado' %></p>
                <p><strong>Horas Asignadas:</strong> <%= materia.horasAsignadas %> de <%= materia.horasNecesarias %></p>
              </div>
            </div>
          <% }) %>
        </div>
      </div>
      <% } %>
      <% if (resultado.conflictos && resultado.conflictos.length > 0) { %>
      <div class="conflicts-found">
        <h4>Conflictos Detectados</h4>
        <div class="conflicts-list">
          <% resultado.conflictos.forEach(conflicto => { %>
            <div class="conflict-result">
              <div class="conflict-icon">
                <i class="fas fa-exclamation-triangle"></i>
              </div>
              <div class="conflict-content">
                <p><strong><%= conflicto.materia.nombre %></strong></p>
                <p><%= conflicto.razon %></p>
              </div>
            </div>
          <% }) %>
        </div>
      </div>
      <% } %>
      <div class="results-actions">
        <button class="btn btn-success" onclick="saveResults()">
          <i class="fas fa-save"></i> Guardar Horarios
        </button>
        <a href="/horarios" class="btn btn-secondary">
          <i class="fas fa-eye"></i> Ver Todos los Horarios
        </a>
      </div>
    </div>
    <% } %>
  </div>
</div>

<script>
function resetForm() {
  document.getElementById('calculateForm').reset();
}

function saveResults() {
  // Implementar guardado de resultados
  alert('Funcionalidad de guardado en desarrollo');
}
</script>

<style>
.detail-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  padding: 20px;
  background: white;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.header-actions {
  display: flex;
  gap: 10px;
}

.detail-content {
  margin-top: 20px;
}

.info-grid {
  display: flex;
  gap: 30px;
  flex-wrap: wrap;
}

.info-card {
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.07);
  padding: 20px 25px 15px 25px;
  min-width: 260px;
  flex: 1 1 260px;
  margin-bottom: 20px;
}

.subjects-grid, .professors-grid {
  display: flex;
  flex-direction: column;
  gap: 10px;
  max-height: 350px;
  overflow-y: auto;
}

.subject-checkbox, .professor-checkbox {
  background: #f8f9fa;
  border: 1px solid #dee2e6;
  border-radius: 8px;
  padding: 10px 15px;
  display: flex;
  align-items: flex-start;
  gap: 10px;
}

.subject-info, .professor-info {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.subject-hours {
  display: flex;
  gap: 8px;
  margin-top: 4px;
}

.badge-info {
  background-color: #17a2b8;
  color: white;
  padding: 4px 8px;
  border-radius: 8px;
  font-size: 12px;
}
.badge-primary {
  background-color: #007bff;
  color: white;
  padding: 4px 8px;
  border-radius: 8px;
  font-size: 12px;
}
.badge-success {
  background-color: #28a745;
  color: white;
  padding: 4px 8px;
  border-radius: 8px;
  font-size: 12px;
}
.badge-warning {
  background-color: #ffc107;
  color: #212529;
  padding: 4px 8px;
  border-radius: 8px;
  font-size: 12px;
}
.badge-secondary {
  background-color: #6c757d;
  color: white;
  padding: 4px 8px;
  border-radius: 8px;
  font-size: 12px;
}
.mt-4 {
  margin-top: 24px;
}
.restrictions-grid {
  display: flex;
  flex-direction: column;
  gap: 10px;
}
.restriction-item label {
  font-weight: 500;
  color: #495057;
  margin-right: 8px;
}
.form-actions {
  display: flex;
  gap: 15px;
  margin-top: 20px;
}

/* Resultados */
.calculation-results {
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.07);
  padding: 25px;
  margin-top: 30px;
}
.results-summary {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
}
.summary-card {
  flex: 1 1 120px;
  background: #f8f9fa;
  border-radius: 10px;
  padding: 15px;
  display: flex;
  align-items: center;
  gap: 15px;
}
.summary-card.success .summary-icon { color: #28a745; }
.summary-card.warning .summary-icon { color: #ffc107; }
.summary-card.info .summary-icon { color: #17a2b8; }
.summary-icon {
  font-size: 32px;
}
.summary-content h4 {
  margin: 0;
  font-size: 24px;
  font-weight: bold;
}
.summary-content p {
  margin: 0;
  color: #666;
  font-size: 14px;
}
.assigned-subjects, .conflicts-found {
  margin-top: 20px;
}
.subject-result {
  background: #e8f5e9;
  border: 1px solid #c8e6c9;
  border-radius: 8px;
  padding: 12px 18px;
  margin-bottom: 10px;
}
.subject-result .subject-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.completion-badge {
  background: #28a745;
  color: white;
  padding: 3px 10px;
  border-radius: 8px;
  font-size: 12px;
}
.conflict-result {
  background: #fff3cd;
  border: 1px solid #ffeeba;
  border-radius: 8px;
  padding: 12px 18px;
  margin-bottom: 10px;
  display: flex;
  align-items: center;
  gap: 10px;
}
.conflict-icon {
  color: #ffc107;
  font-size: 22px;
}
.results-actions {
  display: flex;
  gap: 15px;
  margin-top: 20px;
}
</style> 